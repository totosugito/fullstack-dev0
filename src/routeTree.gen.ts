/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RedirectImport } from './routes/redirect'
import { Route as PagesImport } from './routes/_pages'
import { Route as UsersRouteImport } from './routes/users.route'
import { Route as PostsRouteImport } from './routes/posts.route'
import { Route as UsersIndexImport } from './routes/users.index'
import { Route as PostsIndexImport } from './routes/posts.index'
import { Route as PagesIndexImport } from './routes/_pages/index'
import { Route as UsersUserIdImport } from './routes/users.$userId'
import { Route as PostsPostIdImport } from './routes/posts.$postId'
import { Route as AuthSignupImport } from './routes/auth/signup'
import { Route as AuthSigninImport } from './routes/auth/signin'
import { Route as PostsPostIdDeepImport } from './routes/posts_.$postId.deep'
import { Route as PagesPoolPoolListImport } from './routes/_pages/_pool/pool-list'
import { Route as PagesHomeHomeImport } from './routes/_pages/_home/home'
import { Route as PagesAlgoAlgoListRouteImport } from './routes/_pages/_algo/algo-list.route'
import { Route as PagesAlgoAlgoListIndexImport } from './routes/_pages/_algo/algo-list.index'

// Create/Update Routes

const RedirectRoute = RedirectImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRoute,
} as any)

const PagesRoute = PagesImport.update({
  id: '/_pages',
  getParentRoute: () => rootRoute,
} as any)

const UsersRouteRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRoute,
} as any)

const PostsRouteRoute = PostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const UsersIndexRoute = UsersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UsersRouteRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostsRouteRoute,
} as any)

const PagesIndexRoute = PagesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PagesRoute,
} as any)

const UsersUserIdRoute = UsersUserIdImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => UsersRouteRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => PostsRouteRoute,
} as any)

const AuthSignupRoute = AuthSignupImport.update({
  id: '/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRoute,
} as any)

const AuthSigninRoute = AuthSigninImport.update({
  id: '/auth/signin',
  path: '/auth/signin',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostIdDeepRoute = PostsPostIdDeepImport.update({
  id: '/posts_/$postId/deep',
  path: '/posts/$postId/deep',
  getParentRoute: () => rootRoute,
} as any)

const PagesPoolPoolListRoute = PagesPoolPoolListImport.update({
  id: '/_pool/pool-list',
  path: '/pool-list',
  getParentRoute: () => PagesRoute,
} as any)

const PagesHomeHomeRoute = PagesHomeHomeImport.update({
  id: '/_home/home',
  path: '/home',
  getParentRoute: () => PagesRoute,
} as any)

const PagesAlgoAlgoListRouteRoute = PagesAlgoAlgoListRouteImport.update({
  id: '/_algo/algo-list',
  path: '/algo-list',
  getParentRoute: () => PagesRoute,
} as any)

const PagesAlgoAlgoListIndexRoute = PagesAlgoAlgoListIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PagesAlgoAlgoListRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsRouteImport
      parentRoute: typeof rootRoute
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRoute
    }
    '/_pages': {
      id: '/_pages'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PagesImport
      parentRoute: typeof rootRoute
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectImport
      parentRoute: typeof rootRoute
    }
    '/auth/signin': {
      id: '/auth/signin'
      path: '/auth/signin'
      fullPath: '/auth/signin'
      preLoaderRoute: typeof AuthSigninImport
      parentRoute: typeof rootRoute
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof PostsRouteImport
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdImport
      parentRoute: typeof UsersRouteImport
    }
    '/_pages/': {
      id: '/_pages/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PagesIndexImport
      parentRoute: typeof PagesImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof PostsRouteImport
    }
    '/users/': {
      id: '/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof UsersRouteImport
    }
    '/_pages/_algo/algo-list': {
      id: '/_pages/_algo/algo-list'
      path: '/algo-list'
      fullPath: '/algo-list'
      preLoaderRoute: typeof PagesAlgoAlgoListRouteImport
      parentRoute: typeof PagesImport
    }
    '/_pages/_home/home': {
      id: '/_pages/_home/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof PagesHomeHomeImport
      parentRoute: typeof PagesImport
    }
    '/_pages/_pool/pool-list': {
      id: '/_pages/_pool/pool-list'
      path: '/pool-list'
      fullPath: '/pool-list'
      preLoaderRoute: typeof PagesPoolPoolListImport
      parentRoute: typeof PagesImport
    }
    '/posts_/$postId/deep': {
      id: '/posts_/$postId/deep'
      path: '/posts/$postId/deep'
      fullPath: '/posts/$postId/deep'
      preLoaderRoute: typeof PostsPostIdDeepImport
      parentRoute: typeof rootRoute
    }
    '/_pages/_algo/algo-list/': {
      id: '/_pages/_algo/algo-list/'
      path: '/'
      fullPath: '/algo-list/'
      preLoaderRoute: typeof PagesAlgoAlgoListIndexImport
      parentRoute: typeof PagesAlgoAlgoListRouteImport
    }
  }
}

// Create and export the route tree

interface PostsRouteRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const PostsRouteRouteChildren: PostsRouteRouteChildren = {
  PostsPostIdRoute: PostsPostIdRoute,
  PostsIndexRoute: PostsIndexRoute,
}

const PostsRouteRouteWithChildren = PostsRouteRoute._addFileChildren(
  PostsRouteRouteChildren,
)

interface UsersRouteRouteChildren {
  UsersUserIdRoute: typeof UsersUserIdRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

const UsersRouteRouteChildren: UsersRouteRouteChildren = {
  UsersUserIdRoute: UsersUserIdRoute,
  UsersIndexRoute: UsersIndexRoute,
}

const UsersRouteRouteWithChildren = UsersRouteRoute._addFileChildren(
  UsersRouteRouteChildren,
)

interface PagesAlgoAlgoListRouteRouteChildren {
  PagesAlgoAlgoListIndexRoute: typeof PagesAlgoAlgoListIndexRoute
}

const PagesAlgoAlgoListRouteRouteChildren: PagesAlgoAlgoListRouteRouteChildren =
  {
    PagesAlgoAlgoListIndexRoute: PagesAlgoAlgoListIndexRoute,
  }

const PagesAlgoAlgoListRouteRouteWithChildren =
  PagesAlgoAlgoListRouteRoute._addFileChildren(
    PagesAlgoAlgoListRouteRouteChildren,
  )

interface PagesRouteChildren {
  PagesIndexRoute: typeof PagesIndexRoute
  PagesAlgoAlgoListRouteRoute: typeof PagesAlgoAlgoListRouteRouteWithChildren
  PagesHomeHomeRoute: typeof PagesHomeHomeRoute
  PagesPoolPoolListRoute: typeof PagesPoolPoolListRoute
}

const PagesRouteChildren: PagesRouteChildren = {
  PagesIndexRoute: PagesIndexRoute,
  PagesAlgoAlgoListRouteRoute: PagesAlgoAlgoListRouteRouteWithChildren,
  PagesHomeHomeRoute: PagesHomeHomeRoute,
  PagesPoolPoolListRoute: PagesPoolPoolListRoute,
}

const PagesRouteWithChildren = PagesRoute._addFileChildren(PagesRouteChildren)

export interface FileRoutesByFullPath {
  '/posts': typeof PostsRouteRouteWithChildren
  '/users': typeof UsersRouteRouteWithChildren
  '': typeof PagesRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/': typeof PagesIndexRoute
  '/posts/': typeof PostsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/algo-list': typeof PagesAlgoAlgoListRouteRouteWithChildren
  '/home': typeof PagesHomeHomeRoute
  '/pool-list': typeof PagesPoolPoolListRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/algo-list/': typeof PagesAlgoAlgoListIndexRoute
}

export interface FileRoutesByTo {
  '/redirect': typeof RedirectRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/': typeof PagesIndexRoute
  '/posts': typeof PostsIndexRoute
  '/users': typeof UsersIndexRoute
  '/home': typeof PagesHomeHomeRoute
  '/pool-list': typeof PagesPoolPoolListRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/algo-list': typeof PagesAlgoAlgoListIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/posts': typeof PostsRouteRouteWithChildren
  '/users': typeof UsersRouteRouteWithChildren
  '/_pages': typeof PagesRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/_pages/': typeof PagesIndexRoute
  '/posts/': typeof PostsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/_pages/_algo/algo-list': typeof PagesAlgoAlgoListRouteRouteWithChildren
  '/_pages/_home/home': typeof PagesHomeHomeRoute
  '/_pages/_pool/pool-list': typeof PagesPoolPoolListRoute
  '/posts_/$postId/deep': typeof PostsPostIdDeepRoute
  '/_pages/_algo/algo-list/': typeof PagesAlgoAlgoListIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/posts'
    | '/users'
    | ''
    | '/redirect'
    | '/auth/signin'
    | '/auth/signup'
    | '/posts/$postId'
    | '/users/$userId'
    | '/'
    | '/posts/'
    | '/users/'
    | '/algo-list'
    | '/home'
    | '/pool-list'
    | '/posts/$postId/deep'
    | '/algo-list/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/redirect'
    | '/auth/signin'
    | '/auth/signup'
    | '/posts/$postId'
    | '/users/$userId'
    | '/'
    | '/posts'
    | '/users'
    | '/home'
    | '/pool-list'
    | '/posts/$postId/deep'
    | '/algo-list'
  id:
    | '__root__'
    | '/posts'
    | '/users'
    | '/_pages'
    | '/redirect'
    | '/auth/signin'
    | '/auth/signup'
    | '/posts/$postId'
    | '/users/$userId'
    | '/_pages/'
    | '/posts/'
    | '/users/'
    | '/_pages/_algo/algo-list'
    | '/_pages/_home/home'
    | '/_pages/_pool/pool-list'
    | '/posts_/$postId/deep'
    | '/_pages/_algo/algo-list/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PostsRouteRoute: typeof PostsRouteRouteWithChildren
  UsersRouteRoute: typeof UsersRouteRouteWithChildren
  PagesRoute: typeof PagesRouteWithChildren
  RedirectRoute: typeof RedirectRoute
  AuthSigninRoute: typeof AuthSigninRoute
  AuthSignupRoute: typeof AuthSignupRoute
  PostsPostIdDeepRoute: typeof PostsPostIdDeepRoute
}

const rootRouteChildren: RootRouteChildren = {
  PostsRouteRoute: PostsRouteRouteWithChildren,
  UsersRouteRoute: UsersRouteRouteWithChildren,
  PagesRoute: PagesRouteWithChildren,
  RedirectRoute: RedirectRoute,
  AuthSigninRoute: AuthSigninRoute,
  AuthSignupRoute: AuthSignupRoute,
  PostsPostIdDeepRoute: PostsPostIdDeepRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/posts",
        "/users",
        "/_pages",
        "/redirect",
        "/auth/signin",
        "/auth/signup",
        "/posts_/$postId/deep"
      ]
    },
    "/posts": {
      "filePath": "posts.route.tsx",
      "children": [
        "/posts/$postId",
        "/posts/"
      ]
    },
    "/users": {
      "filePath": "users.route.tsx",
      "children": [
        "/users/$userId",
        "/users/"
      ]
    },
    "/_pages": {
      "filePath": "_pages.tsx",
      "children": [
        "/_pages/",
        "/_pages/_algo/algo-list",
        "/_pages/_home/home",
        "/_pages/_pool/pool-list"
      ]
    },
    "/redirect": {
      "filePath": "redirect.tsx"
    },
    "/auth/signin": {
      "filePath": "auth/signin.tsx"
    },
    "/auth/signup": {
      "filePath": "auth/signup.tsx"
    },
    "/posts/$postId": {
      "filePath": "posts.$postId.tsx",
      "parent": "/posts"
    },
    "/users/$userId": {
      "filePath": "users.$userId.tsx",
      "parent": "/users"
    },
    "/_pages/": {
      "filePath": "_pages/index.tsx",
      "parent": "/_pages"
    },
    "/posts/": {
      "filePath": "posts.index.tsx",
      "parent": "/posts"
    },
    "/users/": {
      "filePath": "users.index.tsx",
      "parent": "/users"
    },
    "/_pages/_algo/algo-list": {
      "filePath": "_pages/_algo/algo-list.route.tsx",
      "parent": "/_pages",
      "children": [
        "/_pages/_algo/algo-list/"
      ]
    },
    "/_pages/_home/home": {
      "filePath": "_pages/_home/home.tsx",
      "parent": "/_pages"
    },
    "/_pages/_pool/pool-list": {
      "filePath": "_pages/_pool/pool-list.tsx",
      "parent": "/_pages"
    },
    "/posts_/$postId/deep": {
      "filePath": "posts_.$postId.deep.tsx"
    },
    "/_pages/_algo/algo-list/": {
      "filePath": "_pages/_algo/algo-list.index.tsx",
      "parent": "/_pages/_algo/algo-list"
    }
  }
}
ROUTE_MANIFEST_END */
